name: Build, Dockerize, and Push to ECR

on:
  push:
    branches:
      - main
      - CarrascoAlejandro
      - develop
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: syntaxflavor-backend
  IMAGE_TAG: latest

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      #  - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # Step 3: Log in to Amazon ECR
      # - name: Login to Amazon ECR
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     mask-password: 'true'

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      # Step 5: Tag Docker image
      - name: Tag Docker image
        run: |
          ECR_URI=${{ secrets.ECR_URI }}
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_URI:$IMAGE_TAG

      # Step 6: Push Docker image to ECR
      # - name: Push to Amazon ECR
      #   run: |
      #     ECR_URI=${{ secrets.ECR_URI }}
      #     docker push $ECR_URI:$IMAGE_TAG

      # Step 6.5 Push to DockerHub
      - name: Push to DockerHub
        run: |
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.DOCKERHUB_USERNAME }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 7: Update the ECS service on Fargate
      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service \
      #       --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
      #       --service ${{ secrets.ECS_SERVICE_NAME }} \
      #       --force-new-deployment \
      #       --region us-east-1

      - name: Set up SSH agent and deploy
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_DROPLET_KEY }}

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan 146.190.141.101 >> ~/.ssh/known_hosts
  
        
      - name: Deploy via SSH
        env:
          HOST: root@146.190.141.101
        run: |
            ssh $HOST 'cd ~/SyntaxFlavor_Backend/digital_ocean && docker compose stop syntaxflavor_backend && docker compose rm -f syntaxflavor_backend && docker compose up -d syntaxflavor_backend'

    # Permisos de AWS para GitHub
    permissions:
      contents: read
      id-token: write