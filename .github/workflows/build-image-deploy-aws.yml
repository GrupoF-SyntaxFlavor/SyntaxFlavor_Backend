name: Build, Dockerize, and Push to ECR

on:
  push:
    branches:
      - main
      - CarrascoAlejandro
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: syntaxflavor/backend
  IMAGE_TAG: latest

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      # Step 5: Tag Docker image
      - name: Tag Docker image
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_URI:$IMAGE_TAG

      # Step 6: Push Docker image to ECR
      - name: Push to Amazon ECR
        run: |
          ECR_URI="860946857945.dkr.ecr.us-east-1.amazonaws.com/demo-app"
          docker push $ECR_URI:$IMAGE_TAG

      # # Step 7: Deploy to ECS Fargate
      # - name: Deploy to ECS Fargate
      #   env:
      #     AWS_REGION: ${{ env.AWS_REGION }}
      #     AWS_ECS_CLUSTER: "arn:aws:ecs:us-east-1:860946857945:cluster/test-demo-fargate"
      #     AWS_ECS_SERVICE: "test-demo-service"  # Reemplaza con el nombre exacto de tu servicio ECS
      #     AWS_ECS_TASK_DEFINITION: "arn:aws:ecs:us-east-1:860946857945:task-definition/test-spring-boot"
      #     ECR_REPOSITORY_URI: ${{ env.ECR_REPOSITORY }}
      #   run: |
      #     # Instalar jq para manipular JSON
      #     sudo apt-get install -y jq

      #     # Obtener la definición de tarea actual y actualizarla con la nueva imagen
      #     TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $AWS_ECS_TASK_DEFINITION --region $AWS_REGION)
      #     NEW_TASK_DEF=$(echo $TASK_DEF_JSON | jq --arg IMAGE "$ECR_REPOSITORY_URI:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)')

      #     # Registrar la nueva definición de tarea con la imagen actualizada
      #     NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | aws ecs register-task-definition --cli-input-json file:///dev/stdin --region $AWS_REGION | jq -r '.taskDefinition.taskDefinitionArn')

      #     # Actualizar el servicio ECS con la nueva definición de tarea
      #     aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN --region $AWS_REGION


    # Permisos de AWS para GitHub
    permissions:
      contents: read
      id-token: write